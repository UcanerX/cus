<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sunshine.mobileapp.api.dept.entity.Dept">
  <resultMap id="BaseResultMap" type="com.sunshine.mobileapp.api.dept.entity.Dept">
    <id column="ID" jdbcType="VARCHAR" property="id" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="CODE" jdbcType="VARCHAR" property="code" />
    <result column="REMARK" jdbcType="VARCHAR" property="remark" />
    <result column="PARENT_ID" jdbcType="VARCHAR" property="parentId" />
    <result column="PARENT_NAME" jdbcType="VARCHAR" property="parentName" />
    <result column="SORT_NUM" jdbcType="INTEGER" property="sortNum" />
  </resultMap>
  <sql id="Base_Column_List">
    ID, NAME, CODE, REMARK, PARENT_ID, PARENT_NAME, SORT_NUM
  </sql>
  <select id="findById" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from SYS_DEPT
    where ID = #{id,jdbcType=VARCHAR}
  </select>
   
  <select id="findByProperties" resultMap="BaseResultMap" parameterType="java.util.Map">
  	select 
    <include refid="Base_Column_List" />
    from SYS_DEPT
    where  1 = 1
    <if test="name != null and name != ''">
    	and NAME = #{name,jdbcType=VARCHAR}
    </if>
    <if test="code != null and code != ''">
    	and CODE = #{code,jdbcType=VARCHAR}
    </if>
    <if test="PARENT_ID != null and parentId != ''">
    	and parentId = #{parentId,jdbcType=VARCHAR}
    </if>
    <if test="PARENT_NAME != null and parentName != ''">
    	and parentName = #{parentName,jdbcType=VARCHAR}
    </if>
  </select>
  
  <delete id="deleteById" parameterType="java.lang.String">
    delete from SYS_DEPT
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.sunshine.mobileapp.api.dept.entity.Dept">
    insert into SYS_DEPT (ID, NAME, CODE, 
      REMARK, PARENT_ID, PARENT_NAME, SORT_NUM)
    values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR}, #{parentId,jdbcType=VARCHAR}, #{parentName,jdbcType=VARCHAR}, 
      #{sortNum,jdbcType=INTEGER})
  </insert>
  <insert id="insertWithoutNull" parameterType="com.sunshine.mobileapp.api.dept.entity.Dept">
    insert into SYS_DEPT
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="name != null">
        NAME,
      </if>
      <if test="code != null">
        CODE,
      </if>
      <if test="remark != null">
        REMARK,
      </if>
      <if test="parentId != null">
        PARENT_ID,
      </if>
      <if test="parentName != null">
        PARENT_NAME,
      </if>
      <if test="sortNum != null">
        SORT_NUM,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=VARCHAR},
      </if>
      <if test="parentName != null">
        #{parentName,jdbcType=VARCHAR},
      </if>
      <if test="sortNum != null">
        #{sortNum,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="update" parameterType="com.sunshine.mobileapp.api.dept.entity.Dept">
    update SYS_DEPT
    <set>
      <if test="name != null">
        NAME = #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        CODE = #{code,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        REMARK = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        PARENT_ID = #{parentId,jdbcType=VARCHAR},
      </if>
      <if test="parentName != null">
        PARENT_NAME = #{parentName,jdbcType=VARCHAR},
      </if>
      <if test="sortNum != null">
        SORT_NUM = #{sortNum,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateById" parameterType="com.sunshine.mobileapp.api.dept.entity.Dept">
    update SYS_DEPT
    set NAME = #{name,jdbcType=VARCHAR},
      CODE = #{code,jdbcType=VARCHAR},
      REMARK = #{remark,jdbcType=VARCHAR},
      PARENT_ID = #{parentId,jdbcType=VARCHAR},
      PARENT_NAME = #{parentName,jdbcType=VARCHAR},
      SORT_NUM = #{sortNum,jdbcType=INTEGER}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  
  <sql id="Base_Column_Where">
    <where>
      <if test="name != null">
         and NAME = #{name,jdbcType=VARCHAR}
      </if>
      <if test="code != null">
         and CODE = #{code,jdbcType=VARCHAR}
      </if>
      <if test="remark != null">
         and REMARK = #{remark,jdbcType=VARCHAR}
      </if>
      <if test="parentId != null">
         and PARENT_ID = #{parentId,jdbcType=VARCHAR}
      </if>
      <if test="parentName != null">
         and PARENT_NAME = #{parentName,jdbcType=VARCHAR}
      </if>
      <if test="sortNum != null">
         and SORT_NUM = #{sortNum,jdbcType=INTEGER}
      </if>
    </where>
  </sql>
  <select id="findAll" resultMap="BaseResultMap">
     select 
    <include refid="Base_Column_List" />
     from SYS_DEPT
  </select>
  <!--findAllDeptList  查询所 -->
  <select id="findAllDeptList" resultMap="BaseResultMap">
  	 SELECT *
     FROM SYS_DEPT
	 WHERE STATUS =1
  </select>
  <select id="findListByPage" parameterType="java.lang.String" resultMap="BaseResultMap">
     select 
    <include refid="Base_Column_List" />
     from SYS_DEPT
    <where>
       1=1 
      <if test="searchValue != null and searchValue != ''">
        and ( 
        (NAME like CONCAT('%',trim('${searchValue}'),'%' ) )  or (CODE like CONCAT('%',trim('${searchValue}'),'%' ) )  or (REMARK like CONCAT('%',trim('${searchValue}'),'%' ) )  or (PARENT_ID like CONCAT('%',trim('${searchValue}'),'%' ) )  or (PARENT_NAME like CONCAT('%',trim('${searchValue}'),'%' ) )  or (SORT_NUM like CONCAT('%',trim('${searchValue}'),'%' ) )  or (HAD_SUB like CONCAT('%',trim('${searchValue}'),'%' ) ) 
         )
      </if>
    </where>
  </select>
  <select id="findByIds" parameterType="java.util.List" resultMap="BaseResultMap">
     select 
    <include refid="Base_Column_List" />
     from SYS_DEPT
    <where >
      ID in 
      <foreach close=")" collection="list" index="index" item="item" open="(" separator=",">
         #{item} 
      </foreach>
    </where >
  </select>
  <delete id="deleteByIds" parameterType="java.util.List">
     delete from 
    SYS_DEPT
    <where>
      ID in 
      <foreach close=")" collection="list" index="index" item="item" open="(" separator=",">
         #{item} 
      </foreach>
    </where>
  </delete>
  <insert id="batchInsert" parameterType="java.util.List">
     insert into 
    SYS_DEPT
    ( ID NAME CODE REMARK PARENT_ID PARENT_NAME SORT_NUM)
    values
    <foreach collection="list" index="index" item="entity" separator=",">
      (
      #{entity.id,jdbcType=VARCHAR},#{entity.name,jdbcType=VARCHAR},#{entity.code,jdbcType=VARCHAR},#{entity.remark,jdbcType=VARCHAR},#{entity.parentId,jdbcType=VARCHAR},#{entity.parentName,jdbcType=VARCHAR},#{entity.sortNum,jdbcType=INTEGER}}
      )
    </foreach>
  </insert>
  
  <select id="findAllSubDeptIds" resultType="java.lang.String" parameterType="java.lang.String">
  	SELECT getDeptChildList(#{deptIds})
  </select>
</mapper>